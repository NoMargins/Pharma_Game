import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import {userName} from '../SecondTask/quiz.selectors'
import { connect } from 'react-redux';
import './loosePage.scss';

const LoosePage = ({userName}) => {
  const [currentParaIndex, setCurrentParaIndex] = useState(0);
  const [startTyping, setStartTyping] = useState(false);
  const [isArrowVisible, setIsArrowVisible] = useState(true);

  const [textToShow, setTextToShow] = useState('');

  const navigation = useNavigate();
  const onContinue = () => navigation('../secondTask');

  const paragraphs = [
    `–•–º–º, ${userName}...`,
    `–í–∏ –¥–æ–±—Ä–µ –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å, –∞–ª–µ —Ç—Ä—ñ—à–∫–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏ –∑ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è–º–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.`,
    `–†–µ–∑—É–ª—å—Ç–∞—Ç? –ñ–∞–±'—è—á–µ –∑—ñ–ª–ª—è!üòÖ`, 
    `–ê–ª–µ –Ω–µ—Ö–∞–π —Ü–µ —Å—Ç–∞–Ω–µ –¥–ª—è –í–∞—Å –Ω–µ–≤–µ–ª–∏–∫–æ—é –ø—Ä–∏–≥–æ–¥–æ—é!`,
    `–ê–¥–∂–µ –∫–æ–ª–∏ –∂–∞–±'—è—á–µ –∑–∞–∫–ª—è—Ç—Ç—è –º–∏–Ω–µ, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.`,
    `–ù–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É —É –í–∞—Å —Ç–æ—á–Ω–æ –≤—Å–µ –≤–∏–π–¥–µ!`,
  ];

  useEffect(() => {
    setTimeout(() => {
      setIsPapirusVisible(true);
      setTimeout(() => {
        setStartTyping(true);
      }, 1500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –¥—Ä—É–∫—É –ø—ñ—Å–ª—è –∑'—è–≤–ª–µ–Ω–Ω—è –ø–∞–ø—ñ—Ä—É—Å–∞
    }, 500); // –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –∑'—è–≤–ª–µ–Ω–Ω—è–º –ø–∞–ø—ñ—Ä—É—Å–∞
  }, []);


  useEffect(() => {
    if (startTyping) {
      if (currentParaIndex < paragraphs.length) {
        if (textToShow.length < paragraphs[currentParaIndex].length) {
          setTimeout(() => {
            setTextToShow(paragraphs[currentParaIndex].substring(0, textToShow.length + 1));
          }, 50);
        } else {
          setCurrentParaIndex(currentParaIndex + 1);
          setTextToShow('');
        }
      } else {
        setTimeout(() => {
          setIsArrowVisible(true);
        }, 1000);// –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç—Ä—ñ–ª–∫—É, –∫–æ–ª–∏ —É–≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞–¥—Ä—É–∫–æ–≤–∞–Ω–æ
      }
    }
  }, [textToShow, currentParaIndex, startTyping]);
  
  const [isPapirusVisible, setIsPapirusVisible] = useState(false);
  useEffect(() => {
    setTimeout(() => {
      setIsPapirusVisible(true);
    }, 2000);
  }, []);
  
  return (
    <div className="loose-page_container">
      <div className={`loose-page_container__papirus ${isPapirusVisible ? 'visible' : ''}`}>
        <img src='https://nezalezhnist.8.co.ua/img/papirus.png' alt="Papirus illustration"/>
        <div className='loose-page_container__papirus__text' id="typeEffect">
          {paragraphs.slice(0, currentParaIndex).map(para => (
            <p key={para}>{para}</p>
          ))}
          <p>{textToShow}</p>
        </div>
        {isArrowVisible && (
      <button className="loose-page_container__arrow" onClick={onContinue}>
        –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑!
      </button>
    )}
      </div>
    </div>
  );
};

const mapStateToProps = (state) => {
	return {
		userName: userName(state),
	};
};


export default connect(mapStateToProps)(LoosePage);